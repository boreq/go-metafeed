package metamngmt

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/zeebo/bencode"
	refs "go.mindeco.de/ssb-refs"
)

func TestAddDereivedWithoutMetadata(t *testing.T) {
	r := require.New(t)

	pk1 := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
	f1, err := refs.NewFeedRefFromBytes(pk1, refs.RefAlgoFeedBendyButt)
	r.NoError(err)

	pk2 := bytes.Repeat([]byte{0xff}, 32)
	f2, err := refs.NewFeedRefFromBytes(pk2, refs.RefAlgoFeedSSB1)
	r.NoError(err)

	addMsg := NewAddDerivedMessage(f1, f2, "test", []byte("asdasdasd"))

	want := []byte{0x64, 0x31, 0x31, 0x3a, 0x66, 0x65, 0x65, 0x64, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x36, 0x3a, 0x6, 0x0, 0x74, 0x65, 0x73, 0x74, 0x38, 0x3a, 0x6d, 0x65, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x33, 0x34, 0x3a, 0x0, 0x3, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x35, 0x3a, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x31, 0x31, 0x3a, 0x6, 0x3, 0x61, 0x73, 0x64, 0x61, 0x73, 0x64, 0x61, 0x73, 0x64, 0x37, 0x3a, 0x73, 0x75, 0x62, 0x66, 0x65, 0x65, 0x64, 0x33, 0x34, 0x3a, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x37, 0x3a, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x64, 0x65, 0x34, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x32, 0x32, 0x3a, 0x6, 0x0, 0x6d, 0x65, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x61, 0x64, 0x64, 0x2f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x65}
	got, err := addMsg.MarshalBencode()
	r.NoError(err)

	r.Equal(want, got)
}

func TestAddDereivedWithMetadata(t *testing.T) {
	r := require.New(t)

	pk1 := []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
	f1, err := refs.NewFeedRefFromBytes(pk1, refs.RefAlgoFeedBendyButt)
	r.NoError(err)

	pk2 := bytes.Repeat([]byte{0xff}, 32)
	f2, err := refs.NewFeedRefFromBytes(pk2, refs.RefAlgoFeedSSB1)
	r.NoError(err)

	meta := map[string]string{
		"querylang": "ql-0",
		"query":     "somejson",
	}
	// TODO: add err to New...()
	addMsg, err := NewAddDerivedMessage(f1, f2, "test", []byte("asdasdasd"), meta)

	// TODO: update want with actual ouput
	want := []byte{}
	got, err := addMsg.MarshalBencode()
	r.NoError(err)
	r.Equal(want, got)

	// TODO: unmarshal back to struct/map value to make sure the values are intact
	var decoded map[string]string
	err = bencode.DecodeBytes(got, &decoded)
	r.NoError(err)

	// TODO
	// r.Equal(meta["query"], decodd[query])
	// r.Equal(meta["querylang"], decodd[querylang])

}
